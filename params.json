{"name":"Webglue","body":"# WebGlue\r\n\r\n  PubSubHubbub Ruby implementation\r\n\r\n\r\n## Overview\r\n\r\nPubSubHubbub (PSHB) is a simple, open, server-to-server web-hook-based pubsub \r\n(publish/subscribe) protocol as an extension to Atom. For more details see\r\nhttp://code.google.com/p/pubsubhubbub/ . \r\nCurrent project is as simple as possible implementation in Ruby of PSHB Core 0.2 \r\nDraft-compatible hub.\r\n\r\n### Implemented features:\r\n\r\n - Publishing new topics (Atom Feeds)\r\n - Subscriptions to existing topics (including callbacks verification) - 'sync' and\r\n   'async' mode verifications\r\n - Fetching atom feeds, finding the new entries and sending them to all subscribers\r\n - Authenticated Content Distribution - 'hub.secret'\r\n \r\n### Still missing (not implemented):\r\n\r\n - Publishers need to manually ping the hub (no automatic check for updated feeds)\r\n - Can only process Atom feeds, not RSS\r\n\r\n\r\n## Required gems\r\n\r\n - sinatra - web framework - routing etc.\r\n - httpclient - POST requests, callbacks verification\r\n - crack - XML parsing\r\n - ratom - Atom feeds fetching/parsing\r\n - SystemTimer - for timeouts on unsuccessful requests\r\n - ruby-hmac - HMAC-SHA1 for content digests\r\n\r\nIf you are using http://heroku.com/ for deployment, your '.gems' file will look like:\r\n\r\n    httpclient\r\n    SystemTimer\r\n    crack\r\n    ratom\r\n    ruby-hmac\r\n\r\n\r\n## Running\r\n\r\nThe whole system is implemented as a Sinatra [ http://www.sinatrarb.com/ ] application. \r\nTo start it locally (on port 4567 for example):\r\n\r\n    git clone git://github.com/zh/webglue.git   \r\n    cd webglue\r\n    bundle install\r\n    bundle exec rackup -p 4567 -s thin\r\n\r\nFor production environment, maybe using 'unicorn' is better:\r\n\r\n    bundle exec unicorn -c ./unicorn.conf -E production\r\n\r\n(optional)\r\n\r\n'async' verification worker process:\r\n\r\n- from crontab:\r\n\r\n    require 'worker'\r\n    WebGlue::Worker.verify\r\n\r\n- independent daemon (checks every WebGlue::Config.CHECK minutes)\r\n\r\n    require 'worker'\r\n    WebGlue::Worker.run\r\n\r\nOr you can uncomment the proper lines in worker.rb ('if __FILE__ == $0' block) and do\r\n\r\n    ruby worker.rb\r\n\r\nhttp://heroku.com/ will automatically recognize the startup file (config.ru) and will \r\nrun your application after the deployment:\r\n\r\n    git clone git://github.com/zh/webglue.git\r\n    cd webglue\r\n    heroku create mypubhub\r\n    git push heroku master\r\n\r\n\r\n## PubSub\r\n\r\nBoth publishing and subscriptions going to the same endpoint - '/'. So if your application\r\nis running on URL http://localhost:4567/ , that will be the endpoint for both publishers\r\n(atom:link[@rel=\"hub\"] in the feed) and subscribers (POST requests for subscription).\r\nOnly for debugging purposes, there are two web form on '/publish' and '/subscribe' URLs.\r\n\r\n\r\n## Publishing new topics\r\n\r\nIf your application is running on URL http://localhost:4567/ , go to \r\nhttp://localhost:4567/publish and insert your Atom feed in the 'Topic:' text box. Press\r\n\"Publish\". There will be no changes on the screen, because the hub is responding with\r\nHTTP code 204 \"No Content\".\r\n\r\nYou can also POST directly to http://localhost:4567/ with parameters, described\r\nin the \"PubSubHubbub Core 0.2\" document - \r\nhttp://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.2.html\r\n\r\nAlso in your feed, insert the line:\r\n\r\n  <link rel=\"hub\" href=\"http://localhost:4567/\" />  (adjust for your install)\r\n\r\nFor now, there is no automatic check for updated feeds implemented, so after changes in\r\nsome feed, repeat the actions, described above (from the web form or via POST).\r\nPublishing is possible once every 5 min.\r\n\r\n\r\n## Subscription to existing topics\r\n\r\nIf your application is running on URL http://localhost:4567/ , go to\r\nhttp://localhost:4567/subscribe and fill the web form:\r\n\r\n - Callback - URL to the webhook, which will receive Atom-formated notifications\r\n - Topic - Atom feed URL, ALREADY PUBLISHED to the system - see 'Publishing new topics' \r\n   above\r\n - Verify mode - Both 'Synchronous' and 'Asynchronous' modes supported\r\n - Mode - 'Subscribe' for adding new subscribers and 'Unsubscribe' for removing \r\n   the already inserted onces\r\n - Verify token - something that your callback need to approve\r\n - Secret - used to compute an HMAC digest of the content, send to the subscriber\r\n\r\nYou can send also POST subscription requests with the required parameters directly to\r\nthe hub endpoint (http://localhost:4567/ in our example).\r\n\r\nThe hub is implementing callbacks verification, described in the \"PubSubHubbub Core 0.2\" \r\ndocument (sending back 'hub.challenge' parameter in the response body).\r\nIn 'Synchronous' mode there will be no changes on the screen after subscription,  \r\nbecause the hub is responding with HTTP code 204 \"No Content\".\r\nIn 'Asynchronous' mode the hub will respond with HTTP code 202 \"Scheduled for verification\"\r\n\r\n\r\n## Notifications format\r\n\r\nCurrent implementation fetch the Atom feeds and just remove already known entries from \r\nthem, without touching other parts of the feed ('title', 'id', 'author' etc.). \r\nAfter that, the feed, with only new entries in it is resend to all topic's subscribers. \r\nBecause of that, the hub cannot process RSS feeds and may have some problems with \r\nnon-well formated feeds. I'll try to fix this in the future releases.\r\nIf the subscriber supplied a value for 'hub.secret' in their subscription request, \r\nthe hub will generate an HMAC signature of the payload and include that signature in \r\nthe response headers ('X-Hub-Signature') of the notification.","tagline":"PubSubHubbub Ruby implementation","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}